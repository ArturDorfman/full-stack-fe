/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/health": {
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/entities/": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            title: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: string;
              title: string;
              description?: string | null;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
            };
          };
        };
      };
    };
  };
  "/api/entities/{entityId}/": {
    patch: {
      parameters: {
        path: {
          entityId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            title?: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: string;
              title: string;
              description?: string | null;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
            };
          };
        };
      };
    };
  };
  "/api/posts/": {
    get: {
      parameters: {
        query?: {
          limit?: number;
          offset?: number;
          search?: string;
          sortBy?: "title" | "createdAt" | "commentsCount";
          sortDirection?: "asc" | "desc";
          minComments?: number;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              posts: ({
                  /** Format: uuid */
                  id: string;
                  title: string;
                  description?: string | null;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: date-time */
                  updatedAt: string;
                  commentsCount: number;
                })[];
              meta: {
                total: number;
                limit: number;
                offset: number;
                page: number;
                /** @enum {string} */
                sortBy: "title" | "createdAt" | "commentsCount";
                /** @enum {string} */
                sortDirection: "asc" | "desc";
              };
            };
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": {
            title: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              title: string;
              description?: string | null;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
              commentsCount: number;
            };
          };
        };
      };
    };
  };
  "/api/posts/{postId}/": {
    get: {
      parameters: {
        path: {
          postId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              title: string;
              description?: string | null;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
              comments: {
                  /** Format: uuid */
                  id: string;
                  text: string;
                  /** Format: uuid */
                  postId: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: date-time */
                  updatedAt: string;
                }[];
            };
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          postId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            title?: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              title: string;
              description?: string | null;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
            };
          };
        };
      };
    };
  };
  "/api/posts/{postId}/comments/": {
    get: {
      parameters: {
        path: {
          postId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
                /** Format: uuid */
                id: string;
                text: string;
                /** Format: uuid */
                postId: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
              }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          postId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              text: string;
              /** Format: uuid */
              postId: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
            };
          };
        };
      };
    };
  };
  "/api/posts/{postId}/comments/{commentId}/": {
    patch: {
      parameters: {
        path: {
          postId: string;
          commentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              text: string;
              /** Format: uuid */
              postId: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description - GENERAL_ERROR -> 1000
     * @enum {integer}
     */
    ErrorCodes: 1000;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
